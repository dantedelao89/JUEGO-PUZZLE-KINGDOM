{"version":3,"sources":["assets/script/social/social.ts"],"names":[],"mappings":";;;;;;;AAAA,0CAA4C;AAC5C,IAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAEf,yCAAoC;AACpC,6CAAwC;AAE3B,QAAA,MAAM,GAAG;IACnB,IAAI;QACD,+CAA+C;QAC/C,8CAA8C;QAC9C,iCAAiC;QACjC,yFAAyF;QACzF,sFAAsF;QACtF,KAAK;IACR,CAAC;IAED,KAAK,YAAC,cAAsB,EAAE,SAAc;QAAtC,+BAAA,EAAA,sBAAsB;QAAE,0BAAA,EAAA,cAAc;QACzC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,eAAK,CAAC,CAAC,eAAe,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QACxF,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,mBAAmB,EAAE,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;IAC/F,CAAC;IAED,WAAW;QACR,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,iBAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACvE,CAAC;IAED,eAAe;QACZ,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,YAAY,CAAC,iBAAO,CAAC,CAAC,qBAAqB,EAAE,CAAC;IAChF,CAAC;IAGD,UAAU,EAAV,UAAW,QAAS;QAApB,iBAkBC;QAjBE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;YACvB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,OAAO,QAAQ,IAAI,QAAQ,EAAE,CAAC;SAChC;QAED,IAAI;YACD,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;gBAClC,KAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,QAAQ;oBAAE,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;gBACT,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,QAAQ;oBAAE,QAAQ,EAAE,CAAA;YAC3B,CAAC,CAAC,CAAC;SACL;QAAC,OAAO,IAAI,EAAE;YACZ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACZ,IAAI,QAAQ;gBAAE,QAAQ,EAAE,CAAA;SAC1B;IACJ,CAAC;IAGD,MAAM,EAAN,UAAO,QAAmB;QAA1B,iBAkBC;QAjBE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO,QAAQ,IAAI,QAAQ,EAAE,CAAC;SAChC;QAED,IAAI;YACD,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;gBAClC,KAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,QAAQ;oBAAE,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;gBACT,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,QAAQ;oBAAE,QAAQ,EAAE,CAAA;YAC3B,CAAC,CAAC,CAAC;SACL;QAAC,OAAO,IAAI,EAAE;YACZ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACZ,IAAI,QAAQ;gBAAE,QAAQ,EAAE,CAAA;SAC1B;IACJ,CAAC;CA6EH,CAAC","file":"","sourceRoot":"/","sourcesContent":["import * as _G from '../system/all_modules';\nconst _ = _G._;\n\nimport Share from \"../social/share\";\nimport Message from '../social/message';\n\nexport const social = {\n   init() {\n      // _G.login.addLoginDataField('subscribeInfo');\n      // _G.login.addLoginDataField('shortcutInfo');\n      // _G.login.addCallback(data => {\n      //    this.subscribeInfo = data.hasOwnProperty('subscribeInfo') ? data.subscribeInfo : 5;\n      //    this.shortcutInfo = data.hasOwnProperty('shortcutInfo') ? data.shortcutInfo : 5;\n      // })\n   },\n\n   share(isFromV2Screen = false, shareCode = '') {\n      cc.find('Canvas/shares').getComponent(Share).sharePostNormal(isFromV2Screen, shareCode);\n      _G.analytic.logShare(_G.gameMechanic.currentCategoryName, _G.gameMechanic.currentFrameName);\n   },\n\n   sendMessage() {\n      cc.find(\"Canvas/messages\").getComponent(Message).sendMessageScore();\n   },\n\n   sendMessageHome() {\n      cc.find('Canvas/message_home').getComponent(Message).sendMessageStillImage();\n   },\n\n\n   inviteHome(callback?) {\n      if (!window['FBInstant']) {\n         this.sendMessageHome();\n         return callback && callback();\n      }\n\n      try {\n         FBInstant.context.chooseAsync().then(() => {\n            this.sendMessageHome();\n            if (callback) callback(FBInstant.context.getID());\n         }).catch(err => {\n            _.log(err);\n            if (callback) callback()\n         });\n      } catch (errX) {\n         _.log(errX);\n         if (callback) callback()\n      }\n   },\n\n\n   invite(callback?: Function) {\n      if (!window['FBInstant']) {\n         this.sendMessage();\n         return callback && callback();\n      }\n\n      try {\n         FBInstant.context.chooseAsync().then(() => {\n            this.sendMessage();\n            if (callback) callback(FBInstant.context.getID());\n         }).catch(err => {\n            _.log(err);\n            if (callback) callback()\n         });\n      } catch (errX) {\n         _.log(errX);\n         if (callback) callback()\n      }\n   },\n\n\n   // askBotSubscribe(callback) {\n   //    // _.log(`this.subscribeInfo=${this.subscribeInfo}`);\n   //    const finalCallback = () => callback && callback();\n   //    if (!window['FBInstant']) return finalCallback();\n   //    if (!_G.utilsFB.isSupportedAPI(\"player.canSubscribeBotAsync\") || !_G.utilsFB.isSupportedAPI(\"player.subscribeBotAsync\")) return finalCallback() || _.log(' askBotSubscribe :: isSupportedAPI > not supported');\n   //    if (this.subscribeInfo == 'accepted' || this.subscribeInfo <= 0) return finalCallback();\n   //    this.subscribeInfo--;\n   //    _G.data.saveData({ subscribeInfo: this.subscribeInfo });\n\n   //    FBInstant.player.canSubscribeBotAsync().then(can_subscribe => {\n   //       if (!can_subscribe) return finalCallback() || _.log(` askBotSubscribe :: can_subscribe = ${can_subscribe} `);\n   //       FBInstant.player.subscribeBotAsync().then(() => {\n   //          this.subscribeInfo = 'accepted';\n   //          _G.data.saveData({ subscribeInfo: this.subscribeInfo });\n   //          //_G.analytic.onSubscribeDone(true);\n   //          finalCallback();\n\n   //       }).catch(e => {\n   //          //_G.analytic.onSubscribeDone(false);\n   //          finalCallback();\n   //       });\n   //    }).catch(e => finalCallback() || _.log(` askBotSubscribe :: canSubscribeBotAsync().then(fail) => `, e));\n   // },\n\n\n   // askShortcut(callback) {\n   //    // _.log(`this.shortcutInfo=${this.shortcutInfo}`);\n   //    const finalCallback = () => callback && callback();\n   //    if (!window['FBInstant']) return finalCallback();\n   //    if (!_G.utilsFB.isSupportedAPI(\"canCreateShortcutAsync\") || !_G.utilsFB.isSupportedAPI(\"createShortcutAsync\")) return finalCallback();\n   //    if (this.shortcutInfo == 'accepted' || this.shortcutInfo <= 0) return finalCallback();\n   //    this.shortcutInfo--;\n   //    _G.data.saveData({ shortcutInfo: this.shortcutInfo });\n\n   //    FBInstant.canCreateShortcutAsync().then(canCreateShortcut => {\n   //       if (!canCreateShortcut) return finalCallback();\n   //       FBInstant.createShortcutAsync().then(() => {\n   //          this.shortcutInfo = 'accepted';\n   //          _G.data.saveData({ shortcutInfo: this.shortcutInfo });\n   //          finalCallback();\n\n   //       }).catch((e) => finalCallback() || _.log(' createShortcutAsync :: ', e));\n   //    }).catch((e) => finalCallback() || _.log(' canCreateShortcutAsync :: ', e));\n   // },\n\n\n   // postSessionScore() {\n   //    if (!window['FBInstant']) return;\n   //    if (_G.user.score) FBInstant.postSessionScore(_G.user.score);\n   //    _.log(` postSessionScore called score = ${_G.user.score}`);\n   //    if (_G.user.score > (_G.game.bestSessionScore || 0)) _G.game.bestSessionScore = _G.user.score;\n   // },\n\n\n   // createContext(playerId, callbackSuccess, callbackFail) {\n   //    // _.log(` about to create context with player ${playerId}`);\n   //    if (!window['FBInstant']) return (callbackSuccess) && callbackSuccess();\n\n   //    const logContextResult = (result, error) => {\n   //       if (result) _.log('createContext Success ====> ', result);\n   //       if (error) _.log('createContext Fail  ====> ', error);\n   //    }\n   //    FBInstant.context.createAsync(playerId).then(\n   //       () => {\n   //          if (callbackSuccess) { callbackSuccess(); }\n   //          logContextResult('success');\n   //       },\n   //       (e) => {\n   //          if (callbackFail) { callbackFail(e); }\n   //          logContextResult('fail', e);\n   //       }\n   //    );\n   // },\n\n};"]}