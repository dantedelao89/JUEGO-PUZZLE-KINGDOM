{"version":3,"sources":["assets/script/core-game/map_visual.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import * as _G from '../system/all_modules';\nconst { _, $ } = _G;\n\nconst FRAME_WIDTH = 620;\nconst FRAME_HEIGHT = 775;\nconst ORG_FRAME_SIZE = 800;\nconst FRAME_SCALE = FRAME_WIDTH / ORG_FRAME_SIZE;\n\nexport const mapVisual = {\n   mainFrameWidth: FRAME_WIDTH,\n   gridNode: null as cc.Node,\n   fullPicNode: null as cc.Node,\n\n   currentMaxCellX: 3,\n   currentMaxCellY: 3,\n   currentCellWidth: 100,\n   currentCellHeight: 100,\n   avatarSpriteFrame: null as cc.SpriteFrame,\n   isRealAvatarLoaded: false,\n\n   init() {\n      this.gridNode = cc.find('Canvas/play_area/scrollview_master/view/content/grid_area/grid_stack/grid');\n      this.fullPicNode = cc.find('Canvas/sample_nodes/full_picture');\n      const rootAvatarNode = cc.find('avatar', this.fullPicNode);\n      this.avatarSpriteFrame = rootAvatarNode.getComponent(cc.Sprite).spriteFrame;\n\n      this.fillAvatarPicture(rootAvatarNode);\n   },\n\n   fillAvatarPicture(rootAvatarNode) {\n      if (window['FBInstant']) {\n         const avatarUrl = FBInstant.player.getPhoto();\n         _G.utilsUI.setNodeSpriteFromUrl(rootAvatarNode, avatarUrl, (texture) => {\n            this.isRealAvatarLoaded = true;\n            const newSFrame = new cc.SpriteFrame(texture);\n            this.avatarSpriteFrame = newSFrame;\n            _G.utilsUI.setNodeSprite(cc.find('Canvas/sample_nodes/sample_frame_cell/mask/avatar'), newSFrame);\n\n            // const fillAvatarAsSample = (realAvatarNode, sampleAvatarNode) => {\n            //    _G.utilsUI.setNodeSprite(realAvatarNode, newSFrame);\n            //    _.setTimeout(() => {\n            //       const smallerSampleSize = _.min(sampleAvatarNode.width, sampleAvatarNode.height);\n            //       realAvatarNode.scale = _.max(smallerSampleSize / realAvatarNode.width, smallerSampleSize / realAvatarNode.height);\n            //    });\n            // };\n\n            // top avatar\n            // const topAvatarNode = cc.find('user_bar/avatar_mask/avatar', _G.coreUI.headerContainer);\n            // const sampleAvatarNode = cc.find('sample_avatar', topAvatarNode.parent);\n            // fillAvatarAsSample(topAvatarNode, sampleAvatarNode);\n\n            _G.categoryList.setupAllFrameAvatars();\n         });\n      }\n   },\n\n\n   clearMap(callback?: Function) {\n      _G.coreFX.hideGrid(() => {\n         this.gridNode.removeAllChildren();\n         if (callback) callback();\n      });\n   },\n\n\n   render(levelInfo, callback?: Function) {\n      const { maxCellX = 3, maxCellY = 3, categoryName, frameName } = levelInfo;\n      const frameNode = cc.find('frame', this.fullPicNode);\n\n      // handle the fullPic\n      if (categoryName && frameName) {\n         if (categoryName != 'tutorial') {\n            const sFrame = _G.resources.frameSprites[categoryName][frameName];\n            _G.utilsUI.setNodeSprite(frameNode, sFrame);\n         }\n         this.setAvatar(categoryName, frameName, frameNode); // setup avatar\n      }\n\n\n      const sampleNode = cc.find('Canvas/sample_nodes/cell');\n\n      this.currentMaxCellX = maxCellX;\n      this.currentMaxCellY = maxCellY;\n      this.currentCellWidth = FRAME_WIDTH / maxCellX;\n      this.currentCellHeight = FRAME_HEIGHT / maxCellX;\n\n      for (let x = 1; x <= maxCellX; x++) {\n         for (let y = 1; y <= maxCellY; y++) {\n            const newCellNode = _.copyNode(sampleNode, this.gridNode);\n            newCellNode.name = x + '_' + y;\n            newCellNode.orgCellPos = { x, y };\n\n            // set up the frame node\n            newCellNode.width = this.currentCellWidth;\n            newCellNode.height = this.currentCellHeight;\n            const cellPicNode = _.copyNode(this.fullPicNode, cc.find('mask', newCellNode));\n            this.setCellNodePos(newCellNode, x, y, true);\n            cellPicNode.position = newCellNode.position.mul(-1);\n\n\n            _G.control.bindCellTap(newCellNode); // bind control\n\n            // handle the mask size manually (widgets cause performance slowdown)\n            const maskNode = cc.find('mask', newCellNode);\n            maskNode.width = newCellNode.width - 4;\n            maskNode.height = newCellNode.height - 4;\n\n            // handle the hint-glow\n            const glowNode = cc.find('border_highlight/hint_glow', newCellNode);\n            glowNode.width = newCellNode.width * 1.33;\n            glowNode.height = newCellNode.height + newCellNode.width * 0.33;\n         }\n      }\n\n      if (callback) callback();\n   },\n\n\n   // adjust avatar position, size, angle from level.avatar_info\n   setAvatar(categoryName, frameName, frameNode, avatarNode?: cc.Node, frameScale = FRAME_SCALE, frameSize = FRAME_WIDTH) {\n      avatarNode = avatarNode || cc.find('avatar', this.fullPicNode);\n      let avatarInfo = _G.levelManager.getAvatarInfo(categoryName, frameName);\n      if (categoryName == 'tutorial') avatarInfo = _G.tutorial.frameAvatarInfo;\n\n      let aCorrectX, aCorrectY;\n      if (avatarNode.width < avatarNode.height) {\n         avatarNode.anchorX = 0;\n         avatarNode.anchorY = 0.5 * (1 + avatarNode.width / avatarNode.height);\n      }\n      else {\n         avatarNode.anchorY = 1;\n         avatarNode.anchorX = 0.5 * (1 - avatarNode.height / avatarNode.width);\n      }\n\n      const [aWidth, aHeight, aX, aY] = [avatarInfo.width, avatarInfo.height, avatarInfo.x, avatarInfo.y].map(factor => factor * frameScale);\n      avatarNode.scale = _.max(aWidth / avatarNode.width, aHeight / avatarNode.height);\n\n      aCorrectX = aX - frameSize / 2;\n      aCorrectY = frameNode.height / 2 - aY;\n      avatarNode.setPosition(aCorrectX, aCorrectY);\n\n      // set the correct angle\n      avatarNode.x += avatarNode.width * avatarNode.scale * (0.5 - avatarNode.anchorX);\n      avatarNode.y += avatarNode.height * avatarNode.scale * (0.5 - avatarNode.anchorY);\n      avatarNode.anchorX = avatarNode.anchorY = 0.5;\n      avatarNode.angle = avatarInfo.angle || 0;\n   },\n\n\n   setCellNodePos(cellNode, cellX, cellY, isInit = false) {\n      cellNode.setPosition(this.cellPosToCoordinate(cellX, cellY));\n      cellNode.cellPos = { x: cellX, y: cellY };\n      if (!isInit) _G.gameMechanic.checkCellInCorrectPos(cellNode);\n   },\n\n   swapCellAnim(cellNode1: cc.Node, cellNode2: cc.Node, callback?: Function) {\n      _G.mapVisual.bringCellsToTop(cellNode1, cellNode2);\n\n      const tmpCellPos = cellNode1.cellPos;\n      const coord1 = this.cellPosToCoordinate(cellNode1.cellPos.x, cellNode1.cellPos.y);\n      const coord2 = this.cellPosToCoordinate(cellNode2.cellPos.x, cellNode2.cellPos.y);\n\n      const speed = 1200;\n      const distance = coord1.sub(coord2).mag();\n      const fxTime = distance / speed;\n\n      const scaleTween = cc.tween().to(fxTime * 0.2, { scale: 1.1 }).delay(fxTime * 0.6).to(fxTime * 0.2, { scale: 1 })\n      scaleTween.clone(cellNode1).start();\n      scaleTween.clone(cellNode2).start();\n      cc.tween(cellNode1).to(fxTime, { position: coord2 }).start();\n      cc.tween(cellNode2).to(fxTime, { position: coord1 }).start();\n\n      _G.audio.playSound('card-swap');\n\n      _.setTimeout(() => {\n         this.setCellNodePos(cellNode1, cellNode2.cellPos.x, cellNode2.cellPos.y);\n         this.setCellNodePos(cellNode2, tmpCellPos.x, tmpCellPos.y);\n         if (callback) callback();\n      }, fxTime * 1000);\n   },\n\n\n   bringCellsToTop(...cellNodeArr) {\n      this.gridNode.children.map(cellNode => {\n         cellNode.zIndex = cellNodeArr.includes(cellNode) ? 2 : 1;\n      })\n   },\n\n\n   // ====================================\n   // ===== SUPPORTIVE\n\n   cellPosToCoordinate(cellX, cellY) {\n      return cc.v2(\n         (cellX - (this.currentMaxCellX + 1) / 2) * this.currentCellWidth,\n         (cellY - (this.currentMaxCellY + 1) / 2) * this.currentCellHeight\n      );\n   },\n\n}"]}