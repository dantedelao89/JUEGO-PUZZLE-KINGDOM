{"version":3,"sources":["assets/script/system/resources_manager.ts"],"names":[],"mappings":";;;;;;;AAAA,kCAAoC;AAC5B,IAAA,CAAC,GAAQ,EAAE,EAAV,EAAE,CAAC,GAAK,EAAE,EAAP,CAAQ;AAEP,QAAA,SAAS,GAAG;IACtB,YAAY,EAAE,EAAE;IAChB,iBAAiB,EAAE,KAAK;IACxB,oBAAoB,EAAE,EAAE;IAExB,IAAI;QAAJ,iBAMC;QALE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/H,EAAE,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,EAA/B,CAA+B,CAAC,CAAC;QAChF,iDAAiD;QAEjD,CAAC,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,EAAE,EAA3B,CAA2B,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAED,oBAAoB;QACjB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,GAAG;YACjE,IAAI,GAAG;gBAAE,OAAO,CAAC,CAAC,GAAG,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;YACvD,IAAM,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YAC3E,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACN,CAAC;IAED,eAAe,YAAC,OAAO,EAAE,SAAS;QAAlC,iBAWC;QAVE,uBAAuB;QACvB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,YAAU,OAAO,SAAI,SAAW,EAAE,EAAE,CAAC,WAAW,EAAE,UAAC,GAAG,EAAE,GAAG;YAC1E,IAAI,CAAC,GAAG,EAAE;gBACP,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;gBAC5C,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAArB,CAAqB,CAAC,CAAC;aAC5D;;gBAEI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,YAAY;IACf,CAAC;IAED,oBAAoB;IACpB,6BAA6B;IAC7B,sDAAsD;IACtD,qFAAqF;IACrF,yCAAyC;IACzC,0DAA0D;IAC1D,wEAAwE;IACxE,eAAe;IAEf,6BAA6B;IAC7B,2EAA2E;IAC3E,6CAA6C;IAC7C,sDAAsD;IACtD,aAAa;IAEb,YAAY;IACZ,SAAS;IACT,KAAK;IAEL,oBAAoB,YAAC,CAAC;QACnB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;CAEH,CAAA","file":"","sourceRoot":"/","sourcesContent":["import * as _G from './all_modules';\nconst { _, $ } = _G;\n\nexport const resources = {\n   frameSprites: {},\n   isAllFramesLoaded: false,\n   frameLoadCallbackArr: [],\n\n   init() {\n      this.frameSprites['tutorial'] = { tut: cc.find('Canvas/sample_nodes/full_picture/frame').getComponent(cc.Sprite).spriteFrame };\n      _G.levelManager.categoryNameArr.map(catName => this.frameSprites[catName] = {});\n      // _.setTimeout(() => this.loadAllFrames(), 100);\n\n      _.setTimeout(() => this.loadImageMessageHome(), 2000);\n   },\n\n   loadImageMessageHome() {\n      cc.resources.load('social/img_message_home', cc.Texture2D, (err, res) => {\n         if (err) return _.log('loadImageMessageHome err', err);\n         const targetNode = cc.find('Canvas/message_home/picture/img_message_home');\n         targetNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(res);\n      });\n   },\n\n   loadSingleFrame(catName, frameName) {\n      // _.setTimeout(() => {\n      cc.resources.load(`frames/${catName}/${frameName}`, cc.SpriteFrame, (err, res) => {\n         if (!err) {\n            this.frameSprites[catName][frameName] = res;\n            this.frameLoadCallbackArr.map(f => f(catName, frameName));\n         }\n\n         else _.log(err);\n      });\n      // }, 1000);\n   },\n\n   // loadAllFrames() {\n   //    let categoryLoaded = 0;\n   //    _G.levelManager.categoryNameArr.map(catName => {\n   //       cc.resources.loadDir(`frames/${catName}`, cc.SpriteFrame, (err, resArr) => {\n   //          if (!err) resArr.map(res => {\n   //             this.frameSprites[catName][res.name] = res;\n   //             this.frameLoadCallbackArr.map(f => f(catName, res.name));\n   //          });\n\n   //          categoryLoaded++;\n   //          if (categoryLoaded == _G.levelManager.categoryNameArr.length) {\n   //             this.isAllFramesLoaded = true;\n   //             _G.coreUI.hideLayout('layout_loading');\n   //          }\n\n   //       });\n   //    });\n   // },\n\n   addFrameLoadCallback(f) {\n      this.frameLoadCallbackArr.push(f);\n   },\n\n}"]}