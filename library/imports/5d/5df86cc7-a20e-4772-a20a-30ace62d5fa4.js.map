{"version":3,"sources":["assets/script/services/utils/utils_coordinate.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import * as _G from '../../system/all_modules';\nconst { $ } = _G;\n\nimport { _ } from './utils_common'; // special case for sub-modules\nexport default {\n    isVecHorz(vec: cc.Vec2) {\n        return _.abs(vec.x) > _.abs(vec.y);\n    },\n\n    getPointRanges(pointArr) {\n        const BIG_INT = 99999999; // Number.MAX_SAFE_INTEGER;\n        let minX = BIG_INT, minY = BIG_INT, maxX = -BIG_INT, maxY = -BIG_INT;\n        pointArr.map(p => {\n            minX = _.min(minX, p.x);\n            minY = _.min(minY, p.y);\n            maxX = _.max(maxX, p.x);\n            maxY = _.max(maxY, p.y);\n        });\n        // _.log(` minX = ${minX}, minY = ${minY}, maxX = ${maxX}, maxY = ${maxY} `);\n        return { minX, minY, maxX, maxY };\n    },\n\n\n    distance2polygon(p, pointArr) {\n        function distToSegment({ x, y }, { x: x1, y: y1 }, { x: x2, y: y2 }) {\n            var A = x - x1;\n            var B = y - y1;\n            var C = x2 - x1;\n            var D = y2 - y1;\n\n            var dot = A * C + B * D;\n            var len_sq = C * C + D * D;\n            var param = -1;\n            if (len_sq != 0) { param = dot / len_sq; }\n\n            var xx, yy;\n            if (param < 0) {\n                xx = x1;\n                yy = y1;\n            } else if (param > 1) {\n                xx = x2;\n                yy = y2;\n            } else {\n                xx = x1 + param * C;\n                yy = y1 + param * D;\n            }\n\n            var dx = x - xx;\n            var dy = y - yy;\n            return Math.sqrt(dx * dx + dy * dy);\n        }\n\n        const dArr = pointArr.map(\n            (subPoint, i) => {\n                const nextSubPoint = pointArr[i + 1] || pointArr[0];\n                const distance = distToSegment(p, subPoint, nextSubPoint);\n                return distance;\n            }\n        ).sort(\n            (A, B) => A > B ? 1 : -1\n        );\n        const ret = dArr[0];\n        return ret;\n    },\n}\n\n"]}